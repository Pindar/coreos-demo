init_config:
  # Change default path of trusted certificates
  # ca_certs: /etc/ssl/certs/ca-certificates.crt

instances:
{{range gets "/skydns/local/example/staging/rabbitmq-15672/*"}}
  {{$data := json .Value}}

  - name: rabbitmq
    url: http://{{$data.host}}:{{$data.port}}/
    timeout: 1

    # If your service uses basic authentication, you can optionally
    # specify a username and password that will be used in the check.
    #
    # username: user
    # password: pass

    # The (optional) window and threshold parameters allow you to trigger
    # alerts only if the check fails x times within the last y attempts
    # where x is the threshold and y is the window.
    #
    threshold: 3
    window: 5

    # The (optional) include_content parameter will instruct the check
    # to include the first 200 characters of the HTTP response body
    # in notifications sent by this plugin. This is best used with
    # "healthcheck"-type URLs, where the body contains a brief, human-
    # readable summary of failure reasons in the case of errors. This
    # defaults to false.
    #
    # include_content: false

    # The (optional) collect_response_time parameter will instruct the
    # check to create a metric 'network.http.response_time', tagged with
    # the url, reporting the response time in seconds.
    #
    collect_response_time: true

    # The (optional) disable_ssl_validation will instruct the check
    # to skip the validation of the SSL certificate of the URL being tested.
    # This is mostly useful when checking SSL connections signed with
    # certificates that are not themselves signed by a public authority.
    # When true, the check logs a warning in collector.log
    #
    # disable_ssl_validation: true

    # The (optional) ssl_expire will instruct the check
    # to create a service check that checks the expiration of the
    # ssl certificate. Allow for a warning to occur when x days are
    # left in the certificate.
    #
    # check_certificate_expiration: true
    # days_warning: 14

    # The (optional) headers parameter allows you to send extra headers
    # with the request. This is useful for explicitly specifying the host
    # header or perhaps adding headers for authorisation purposes. Note
    # that the http client library converts all headers to lowercase.
    # This is legal according to RFC2616
    # (See: http://tools.ietf.org/html/rfc2616#section-4.2)
    # but may be problematic with some HTTP servers
    # (See: https://code.google.com/p/httplib2/issues/detail?id=169)
    #
    # headers:
    #   Host: alternative.host.example.com
    #   X-Auth-Token: SOME-AUTH-TOKEN

    # The (optional) skip_event parameter will instruct the check to not
    # create any event to avoid duplicates with a server side service check.
    # This default to False.
    #
    skip_event: true

    tags:
      - url:http://rabbitmq-15672.staging.example.local
      - environment:staging

{{end}}

{{range gets "/skydns/local/example/staging/kibana/*"}}
  {{$data := json .Value}}

  - name: kibana
    url: http://{{$data.host}}:{{$data.port}}/
    timeout: 1
    threshold: 3
    window: 5
    collect_response_time: true
    skip_event: true
    tags:
      - url:http://kibana.staging.example.local
      - environment:staging

{{end}}

{{range gets "/skydns/local/example/staging/elasticsearch-9200/*"}}
  {{$data := json .Value}}

  - name: elasticsearch-nodes
    url: http://{{$data.host}}:{{$data.port}}/
    timeout: 1
    threshold: 3
    window: 5
    collect_response_time: true
    skip_event: true
    tags:
      - url:http://elasticsearch-9200.staging.example.local
      - environment:staging

{{end}}

{{range gets "/skydns/local/example/staging/elasticsearch_client/*"}}
  {{$data := json .Value}}

  - name: elasticsearch-clients
    url: http://{{$data.host}}:{{$data.port}}/
    timeout: 1
    threshold: 3
    window: 5
    collect_response_time: true
    skip_event: true
    tags:
      - url:http://elasticsearch_client.staging.example.local
      - environment:staging

{{end}}